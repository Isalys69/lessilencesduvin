import os, stripe
from datetime import datetime
from flask import Blueprint, render_template, request, jsonify, session as flask_session, redirect, url_for, flash
from flask_login import current_user

from app import db
from app.models.commandes import Commande, CommandeProduit
from app.forms.checkout import GuestCheckoutForm
from app.utils.panier_tools import get_session_panier

# ======================================================
# üß≠ Blueprint Paiement
# ------------------------------------------------------
# G√®re :
#   - la cr√©ation de commande (checkout)
#   - la session Stripe
#   - le webhook de confirmation
#   - les pages de succ√®s / annulation
# ======================================================
paiement_bp = Blueprint('paiement', __name__, url_prefix='/paiement')

# Configuration Stripe
stripe.api_key = os.getenv("STRIPE_SECRET_KEY")
print("‚úÖ Stripe charg√© - cl√© publique :", os.getenv("STRIPE_PUBLIC_KEY")[:15], "...")

# ======================================================
# üü¢ /paiement/create-checkout-session
# ------------------------------------------------------
# ‚ûú Cr√©e une commande ‚Äúen attente‚Äù avant le paiement Stripe
# ‚ûú Lance la session Stripe
# ‚ûú Associe la commande √† la session Stripe (pour suivi du paiement)
# ‚ûú Redirige ensuite vers Stripe Checkout
# ======================================================

@paiement_bp.route('/create-checkout-session', methods=['POST', 'GET'])
def create_checkout_session():
    panier = get_session_panier()
    if not panier:
        flash("Votre panier est vide.", "warning")
        return redirect(url_for('catalogue.index'))

    total = sum(i['prix'] * i['qty'] for i in panier)
    montant_cents = int(float(total) * 100)

    # D√©tection de l‚Äôenvironnement (local ou production)
    if request.host.startswith("127.0.0.1") or "localhost" in request.host:
        base_url = "http://127.0.0.1:5000"
    else:
        base_url = "https://www.lessilencesduvin.fr"

    # =====================================================
    # üßæ √âtape 1 : Cr√©ation d'une commande "en attente"
    # -----------------------------------------------------
    # ‚ûú On ne demande aucune coordonn√©e ici
    # ‚ûú Juste le montant et le statut
    # =====================================================
    commande = Commande(
        total_ttc=total,
        statut='en_attente',
        date_commande=datetime.utcnow()
    )
    db.session.add(commande)
    db.session.commit()

    # Stocker temporairement dans la session Flask
    flask_session['commande_id'] = commande.id

    print(f"üßæ Commande {commande.id} cr√©√©e (en attente, total {total} ‚Ç¨)")

    try:
        # =====================================================
        # üü¢ √âtape 2 : Cr√©ation de la session Stripe
        # =====================================================
        stripe_session = stripe.checkout.Session.create(
            payment_method_types=["card"],
            line_items=[{
                "price_data": {
                    "currency": "eur",
                    "product_data": {"name": "Les Silences du Vin"},
                    "unit_amount": montant_cents,
                },
                "quantity": 1,
            }],
            mode="payment",
            success_url=f"{base_url}/paiement/success?session_id={{CHECKOUT_SESSION_ID}}",
            cancel_url=f"{base_url}/paiement/cancel",
        )

        # =====================================================
        # üîó √âtape 3 : Lier la commande √† la session Stripe
        # =====================================================
        commande.stripe_session_id = stripe_session.id
        db.session.commit()
        print(f"üîó Commande {commande.id} li√©e √† Stripe {stripe_session.id}")

        # =====================================================
        # üöÄ √âtape 4 : Retour JSON pour front ou redirection directe
        # =====================================================
        return jsonify({"id": stripe_session.id})

    except Exception as e:
        current_app.logger.error(f"Erreur Stripe : {type(e).__name__} - {e}")
        flash("Le service de paiement est momentan√©ment indisponible. Veuillez r√©essayer plus tard.", "warning")
        return redirect(url_for('catalogue.index'))


# ======================================================
# üü£ 3. Webhook Stripe
# ------------------------------------------------------
# ‚ûú Appel√© automatiquement par Stripe
# ‚ûú V√©rifie la signature de s√©curit√©
# ‚ûú Met √† jour la commande en "pay√©"
# ======================================================
@paiement_bp.route('/webhook/stripe', methods=['POST'])
def stripe_webhook():
    payload = request.data
    sig_header = request.headers.get('Stripe-Signature')

    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, os.getenv('STRIPE_WEBHOOK_SECRET')
        )
    except stripe.error.SignatureVerificationError:
        return "Signature Stripe invalide", 400

    # √âv√©nement : paiement valid√©
    if event['type'] == 'checkout.session.completed':
        session_stripe = event['data']['object']
        commande = Commande.query.filter_by(stripe_session_id=session_stripe['id']).first()
        if commande:
            commande.statut = 'pay√©'
            db.session.commit()
            print(f"‚úÖ Commande {commande.id} marqu√©e comme pay√©e (via Webhook).")

    return '', 200

# ======================================================
# üü£ /paiement/infos-livraison
# ------------------------------------------------------
# ‚ûú Page post-paiement o√π le client saisit ses coordonn√©es
# ‚ûú Met √† jour la commande existante apr√®s succ√®s Stripe
# ======================================================
@paiement_bp.route('/infos-livraison', methods=['GET', 'POST'])
def infos_livraison():
    commande_id = flask_session.get('commande_id')
    commande = Commande.query.get(commande_id) if commande_id else None

    if not commande:
        flash("Aucune commande √† compl√©ter.", "warning")
        return redirect(url_for('catalogue.index'))

    form = GuestCheckoutForm()

    if form.validate_on_submit():
        commande.email_client = form.email.data
        commande.prenom_client = form.prenom.data
        commande.nom_client = form.nom.data
        commande.adresse_livraison = form.adresse_livraison.data
        commande.code_postal_livraison = form.code_postal_livraison.data
        commande.ville_livraison = form.ville_livraison.data
        commande.telephone_livraison = form.telephone.data
        commande.adresse_facturation = form.adresse_facturation.data
        commande.code_postal_facturation = form.code_postal_facturation.data
        commande.ville_facturation = form.ville_facturation.data
        commande.statut = 'compl√©t√©e'

        db.session.commit()
        flash("Merci ! Vos informations ont bien √©t√© enregistr√©es.", "success")
        flask_session.pop('panier', None)
        return redirect(url_for('catalogue.index'))

    return render_template('paiement/infos_livraison.html', form=form, commande=commande)

# ======================================================
# üîµ 4. Route /success (version post-Stripe)
# ------------------------------------------------------
# ‚ûú Page de confirmation Stripe
# ‚ûú Met √† jour la commande (statut = pay√©)
# ‚ûú Redirige vers /paiement/infos pour compl√©ter les coordonn√©es
# ======================================================
@paiement_bp.route('/success')
def success():
    session_id = request.args.get('session_id', '')
    if not session_id:
        flash("Session Stripe manquante.", "warning")
        return render_template('paiement/cancel.html')

    # R√©cup√©ration de la commande li√©e √† cette session Stripe
    commande = Commande.query.filter_by(stripe_session_id=session_id).first()
    if not commande:
        print("‚ö†Ô∏è Aucune commande trouv√©e pour cette session Stripe.")
        return render_template('paiement/cancel.html')

    # Si la commande n‚Äôest pas encore marqu√©e comme pay√©e
    if commande.statut != 'pay√©':
        commande.statut = 'pay√©'
        db.session.commit()
        print(f"‚úÖ Commande {commande.id} marqu√©e comme pay√©e.")

    # Stocker l'ID dans la session Flask
    flask_session['commande_id'] = commande.id

    # Rediriger vers la page de saisie des informations client
    return redirect(url_for('paiement.infos_livraison'))


# ======================================================
# üî¥ 5. Route /cancel
# ------------------------------------------------------
# ‚ûú Page affich√©e si le client annule ou interrompt le paiement Stripe.
# ‚ûú R√©cup√®re le panier actuel en session pour maintenir l‚Äôaffichage du badge
#     "Panier (n)" dans base.html.
# ‚ûú Ne modifie pas la commande en base (elle reste 'en_attente').
# ======================================================
@paiement_bp.route('/cancel')
def cancel():
    panier = get_session_panier()
    panier_count = sum(i['qty'] for i in panier)
    return render_template('paiement/cancel.html', panier_count=panier_count)
